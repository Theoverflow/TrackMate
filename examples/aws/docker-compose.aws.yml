version: '3.8'

# Docker Compose for AWS-integrated wafer monitoring
# This setup runs locally but sends metrics to AWS CloudWatch and X-Ray

services:
  # Sidecar agent with AWS integrations
  sidecar-agent:
    build:
      context: ../../
      dockerfile: examples/aws/Dockerfile.sidecar
    container_name: wafer-sidecar-aws
    ports:
      - "17000:17000"
      - "8000:8000"  # Metrics endpoint
    environment:
      - INTEGRATION_CONFIG=/config/aws-cloudwatch.json
      - AWS_REGION=us-east-1
      # IAM role credentials (EC2) or provide keys
      # - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      # - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    volumes:
      - ../../examples/integrations:/config:ro
      - sidecar-spool:/tmp/sidecar-spool
    networks:
      - wafer-net
    restart: unless-stopped

  # Local API (if needed for dual-mode: AWS + local storage)
  local-api:
    image: wafer-local-api:latest
    container_name: wafer-local-api
    ports:
      - "18000:18000"
    environment:
      - DATABASE_URL=postgresql://wafer:wafer@postgres:5432/wafer_local
      - DB_POOL_MIN_SIZE=5
      - DB_POOL_MAX_SIZE=20
    depends_on:
      - postgres
    networks:
      - wafer-net
    restart: unless-stopped

  # TimescaleDB (optional, for hybrid storage)
  postgres:
    image: timescale/timescaledb:latest-pg14
    container_name: wafer-timescaledb
    environment:
      - POSTGRES_USER=wafer
      - POSTGRES_PASSWORD=wafer
      - POSTGRES_DB=wafer_local
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ../../ops/sql/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql:ro
      - ../../ops/sql/timescaledb_enhancements.sql:/docker-entrypoint-initdb.d/02-enhancements.sql:ro
    ports:
      - "5432:5432"
    networks:
      - wafer-net
    restart: unless-stopped

  # Local dashboard (optional)
  web-local:
    image: wafer-web-local:latest
    container_name: wafer-web-local
    ports:
      - "8501:8501"
    environment:
      - LOCAL_API_URL=http://local-api:18000
    depends_on:
      - local-api
    networks:
      - wafer-net
    restart: unless-stopped

volumes:
  postgres-data:
  sidecar-spool:

networks:
  wafer-net:
    driver: bridge

# Usage:
# 1. Set AWS credentials:
#    export AWS_ACCESS_KEY_ID=your_key
#    export AWS_SECRET_ACCESS_KEY=your_secret
#    (Or use IAM instance profile if running on EC2)
#
# 2. Build images:
#    docker-compose -f examples/aws/docker-compose.aws.yml build
#
# 3. Start services:
#    docker-compose -f examples/aws/docker-compose.aws.yml up -d
#
# 4. View logs:
#    docker-compose -f examples/aws/docker-compose.aws.yml logs -f sidecar-agent
#
# 5. Check CloudWatch:
#    - Open AWS Console -> CloudWatch
#    - Navigate to Metrics -> Custom Namespaces -> WaferMonitor
#    - View logs in Log Groups -> /wafer-monitor/jobs
#
# 6. Check X-Ray:
#    - Open AWS Console -> X-Ray
#    - View Service Map and Traces

